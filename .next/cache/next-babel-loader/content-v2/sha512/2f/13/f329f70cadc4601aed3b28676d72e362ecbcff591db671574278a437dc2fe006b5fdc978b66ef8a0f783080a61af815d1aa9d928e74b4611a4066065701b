{"ast":null,"code":"import morph from 'morphmorph';\nimport omitBy from 'lodash.omitby';\nimport { htmlUnescape } from 'escape-goat';\nconst SETTINGS_KEY = 'CARBON_STATE';\nconst PRESETS_KEY = 'CARBON_PRESETS';\nconst THEMES_KEY = 'CARBON_THEMES';\n\nconst createAssigner = key => {\n  const assign = morph.assign(key);\n  return v => assign(localStorage, JSON.stringify(v));\n};\n\nconst map = fn => obj => obj.map(fn);\n\nexport const omit = keys => object => omitBy(object, (_, k) => keys.indexOf(k) > -1);\nexport const saveSettings = morph.compose(createAssigner(SETTINGS_KEY), omit(['code', 'backgroundImage', 'backgroundImageSelection', 'themes', 'highlights', 'fontUrl', 'selectedLines', 'name']));\nexport const savePresets = morph.compose(createAssigner(PRESETS_KEY), map(omit(['backgroundImageSelection'])));\nexport const saveThemes = createAssigner(THEMES_KEY);\n\nconst parse = v => {\n  try {\n    return JSON.parse(v);\n  } catch (e) {// pass\n  }\n};\n\nexport const toggle = stateField => state => ({\n  [stateField]: !state[stateField]\n}); // https://gist.github.com/alexgibson/1704515\n\nexport const escapeHtml = s => {\n  if (typeof s === 'string') {\n    return s.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;');\n  }\n};\nexport const unescapeHtml = s => {\n  if (typeof s === 'string') {\n    return htmlUnescape(s).replace(/&#x2F;/g, '/');\n  }\n};\nexport const getSettings = morph.compose(parse, escapeHtml, morph.get(SETTINGS_KEY));\nexport const getPresets = morph.compose(parse, morph.get(PRESETS_KEY));\nexport const getThemes = morph.compose(parse, morph.get(THEMES_KEY));\nexport const clearSettings = () => localStorage.removeItem(SETTINGS_KEY);\nexport const fileToDataURL = blob => new Promise(res => {\n  const reader = new FileReader();\n\n  reader.onload = e => res(e.target.result);\n\n  reader.readAsDataURL(blob);\n});\nexport const fileToJSON = blob => new Promise(res => {\n  const reader = new FileReader();\n\n  reader.onload = e => res(parse(e.target.result));\n\n  reader.readAsText(blob);\n});\nexport const formatCode = async code => {\n  const prettier = await import('prettier/standalone');\n  const babylonParser = await import('prettier/parser-babel');\n  return prettier.format(code, {\n    parser: 'babel',\n    plugins: [babylonParser],\n    semi: false,\n    singleQuote: true\n  });\n};\nexport const stringifyRGBA = obj => `rgba(${obj.r},${obj.g},${obj.b},${obj.a})`;\nexport const generateId = () => Math.random().toString(36).slice(2);\nexport function dataURLtoBlob(dataurl) {\n  const [first, second] = dataurl.split(',');\n  const mime = first.match(/:(.*?);/)[1];\n  const bstr = atob(second);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], {\n    type: mime\n  });\n}","map":{"version":3,"sources":["/Users/limengyu/Desktop/private/code/project/show-codes/lib/util.js"],"names":["morph","omitBy","htmlUnescape","SETTINGS_KEY","PRESETS_KEY","THEMES_KEY","createAssigner","key","assign","v","localStorage","JSON","stringify","map","fn","obj","omit","keys","object","_","k","indexOf","saveSettings","compose","savePresets","saveThemes","parse","e","toggle","stateField","state","escapeHtml","s","replace","unescapeHtml","getSettings","get","getPresets","getThemes","clearSettings","removeItem","fileToDataURL","blob","Promise","res","reader","FileReader","onload","target","result","readAsDataURL","fileToJSON","readAsText","formatCode","code","prettier","babylonParser","format","parser","plugins","semi","singleQuote","stringifyRGBA","r","g","b","a","generateId","Math","random","toString","slice","dataURLtoBlob","dataurl","first","second","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,WAAW,GAAG,gBAApB;AACA,MAAMC,UAAU,GAAG,eAAnB;;AAEA,MAAMC,cAAc,GAAGC,GAAG,IAAI;AAC5B,QAAMC,MAAM,GAAGR,KAAK,CAACQ,MAAN,CAAaD,GAAb,CAAf;AAEA,SAAOE,CAAC,IAAID,MAAM,CAACE,YAAD,EAAeC,IAAI,CAACC,SAAL,CAAeH,CAAf,CAAf,CAAlB;AACD,CAJD;;AAMA,MAAMI,GAAG,GAAGC,EAAE,IAAIC,GAAG,IAAIA,GAAG,CAACF,GAAJ,CAAQC,EAAR,CAAzB;;AACA,OAAO,MAAME,IAAI,GAAGC,IAAI,IAAIC,MAAM,IAAIjB,MAAM,CAACiB,MAAD,EAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUH,IAAI,CAACI,OAAL,CAAaD,CAAb,IAAkB,CAAC,CAAtC,CAArC;AAEP,OAAO,MAAME,YAAY,GAAGtB,KAAK,CAACuB,OAAN,CAC1BjB,cAAc,CAACH,YAAD,CADY,EAE1Ba,IAAI,CAAC,CACH,MADG,EAEH,iBAFG,EAGH,0BAHG,EAIH,QAJG,EAKH,YALG,EAMH,SANG,EAOH,eAPG,EAQH,MARG,CAAD,CAFsB,CAArB;AAaP,OAAO,MAAMQ,WAAW,GAAGxB,KAAK,CAACuB,OAAN,CACzBjB,cAAc,CAACF,WAAD,CADW,EAEzBS,GAAG,CAACG,IAAI,CAAC,CAAC,0BAAD,CAAD,CAAL,CAFsB,CAApB;AAIP,OAAO,MAAMS,UAAU,GAAGnB,cAAc,CAACD,UAAD,CAAjC;;AAEP,MAAMqB,KAAK,GAAGjB,CAAC,IAAI;AACjB,MAAI;AACF,WAAOE,IAAI,CAACe,KAAL,CAAWjB,CAAX,CAAP;AACD,GAFD,CAEE,OAAOkB,CAAP,EAAU,CACV;AACD;AACF,CAND;;AAQA,OAAO,MAAMC,MAAM,GAAGC,UAAU,IAAIC,KAAK,KAAK;AAAE,GAACD,UAAD,GAAc,CAACC,KAAK,CAACD,UAAD;AAAtB,CAAL,CAAlC,C,CAEP;;AACA,OAAO,MAAME,UAAU,GAAGC,CAAC,IAAI;AAC7B,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,WAAOA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,MAAhB,EAAwBA,OAAxB,CAAgC,IAAhC,EAAsC,MAAtC,EAA8CA,OAA9C,CAAsD,KAAtD,EAA6D,QAA7D,CAAP;AACD;AACF,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAGF,CAAC,IAAI;AAC/B,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,WAAO9B,YAAY,CAAC8B,CAAD,CAAZ,CAAgBC,OAAhB,CAAwB,SAAxB,EAAmC,GAAnC,CAAP;AACD;AACF,CAJM;AAMP,OAAO,MAAME,WAAW,GAAGnC,KAAK,CAACuB,OAAN,CAAcG,KAAd,EAAqBK,UAArB,EAAiC/B,KAAK,CAACoC,GAAN,CAAUjC,YAAV,CAAjC,CAApB;AAEP,OAAO,MAAMkC,UAAU,GAAGrC,KAAK,CAACuB,OAAN,CAAcG,KAAd,EAAqB1B,KAAK,CAACoC,GAAN,CAAUhC,WAAV,CAArB,CAAnB;AAEP,OAAO,MAAMkC,SAAS,GAAGtC,KAAK,CAACuB,OAAN,CAAcG,KAAd,EAAqB1B,KAAK,CAACoC,GAAN,CAAU/B,UAAV,CAArB,CAAlB;AAEP,OAAO,MAAMkC,aAAa,GAAG,MAAM7B,YAAY,CAAC8B,UAAb,CAAwBrC,YAAxB,CAA5B;AAEP,OAAO,MAAMsC,aAAa,GAAGC,IAAI,IAC/B,IAAIC,OAAJ,CAAYC,GAAG,IAAI;AACjB,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgBpB,CAAC,IAAIiB,GAAG,CAACjB,CAAC,CAACqB,MAAF,CAASC,MAAV,CAAxB;;AACAJ,EAAAA,MAAM,CAACK,aAAP,CAAqBR,IAArB;AACD,CAJD,CADK;AAOP,OAAO,MAAMS,UAAU,GAAGT,IAAI,IAC5B,IAAIC,OAAJ,CAAYC,GAAG,IAAI;AACjB,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgBpB,CAAC,IAAIiB,GAAG,CAAClB,KAAK,CAACC,CAAC,CAACqB,MAAF,CAASC,MAAV,CAAN,CAAxB;;AACAJ,EAAAA,MAAM,CAACO,UAAP,CAAkBV,IAAlB;AACD,CAJD,CADK;AAOP,OAAO,MAAMW,UAAU,GAAG,MAAMC,IAAN,IAAc;AACtC,QAAMC,QAAQ,GAAG,MAAM,OAAO,qBAAP,CAAvB;AACA,QAAMC,aAAa,GAAG,MAAM,OAAO,uBAAP,CAA5B;AAEA,SAAOD,QAAQ,CAACE,MAAT,CAAgBH,IAAhB,EAAsB;AAC3BI,IAAAA,MAAM,EAAE,OADmB;AAE3BC,IAAAA,OAAO,EAAE,CAACH,aAAD,CAFkB;AAG3BI,IAAAA,IAAI,EAAE,KAHqB;AAI3BC,IAAAA,WAAW,EAAE;AAJc,GAAtB,CAAP;AAMD,CAVM;AAYP,OAAO,MAAMC,aAAa,GAAG/C,GAAG,IAAK,QAAOA,GAAG,CAACgD,CAAE,IAAGhD,GAAG,CAACiD,CAAE,IAAGjD,GAAG,CAACkD,CAAE,IAAGlD,GAAG,CAACmD,CAAE,GAAtE;AAEP,OAAO,MAAMC,UAAU,GAAG,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAzB;AAEP,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AACrC,QAAM,CAACC,KAAD,EAAQC,MAAR,IAAkBF,OAAO,CAACG,KAAR,CAAc,GAAd,CAAxB;AACA,QAAMC,IAAI,GAAGH,KAAK,CAACI,KAAN,CAAY,SAAZ,EAAuB,CAAvB,CAAb;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACL,MAAD,CAAjB;AACA,MAAIM,CAAC,GAAGF,IAAI,CAACG,MAAb;AACA,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,CAAf,CAAd;;AACA,SAAOA,CAAC,EAAR,EAAY;AACVE,IAAAA,KAAK,CAACF,CAAD,CAAL,GAAWF,IAAI,CAACM,UAAL,CAAgBJ,CAAhB,CAAX;AACD;;AACD,SAAO,IAAIK,IAAJ,CAAS,CAACH,KAAD,CAAT,EAAkB;AAAEI,IAAAA,IAAI,EAAEV;AAAR,GAAlB,CAAP;AACD","sourcesContent":["import morph from 'morphmorph'\nimport omitBy from 'lodash.omitby'\nimport { htmlUnescape } from 'escape-goat'\n\nconst SETTINGS_KEY = 'CARBON_STATE'\nconst PRESETS_KEY = 'CARBON_PRESETS'\nconst THEMES_KEY = 'CARBON_THEMES'\n\nconst createAssigner = key => {\n  const assign = morph.assign(key)\n\n  return v => assign(localStorage, JSON.stringify(v))\n}\n\nconst map = fn => obj => obj.map(fn)\nexport const omit = keys => object => omitBy(object, (_, k) => keys.indexOf(k) > -1)\n\nexport const saveSettings = morph.compose(\n  createAssigner(SETTINGS_KEY),\n  omit([\n    'code',\n    'backgroundImage',\n    'backgroundImageSelection',\n    'themes',\n    'highlights',\n    'fontUrl',\n    'selectedLines',\n    'name',\n  ])\n)\nexport const savePresets = morph.compose(\n  createAssigner(PRESETS_KEY),\n  map(omit(['backgroundImageSelection']))\n)\nexport const saveThemes = createAssigner(THEMES_KEY)\n\nconst parse = v => {\n  try {\n    return JSON.parse(v)\n  } catch (e) {\n    // pass\n  }\n}\n\nexport const toggle = stateField => state => ({ [stateField]: !state[stateField] })\n\n// https://gist.github.com/alexgibson/1704515\nexport const escapeHtml = s => {\n  if (typeof s === 'string') {\n    return s.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;')\n  }\n}\n\nexport const unescapeHtml = s => {\n  if (typeof s === 'string') {\n    return htmlUnescape(s).replace(/&#x2F;/g, '/')\n  }\n}\n\nexport const getSettings = morph.compose(parse, escapeHtml, morph.get(SETTINGS_KEY))\n\nexport const getPresets = morph.compose(parse, morph.get(PRESETS_KEY))\n\nexport const getThemes = morph.compose(parse, morph.get(THEMES_KEY))\n\nexport const clearSettings = () => localStorage.removeItem(SETTINGS_KEY)\n\nexport const fileToDataURL = blob =>\n  new Promise(res => {\n    const reader = new FileReader()\n    reader.onload = e => res(e.target.result)\n    reader.readAsDataURL(blob)\n  })\n\nexport const fileToJSON = blob =>\n  new Promise(res => {\n    const reader = new FileReader()\n    reader.onload = e => res(parse(e.target.result))\n    reader.readAsText(blob)\n  })\n\nexport const formatCode = async code => {\n  const prettier = await import('prettier/standalone')\n  const babylonParser = await import('prettier/parser-babel')\n\n  return prettier.format(code, {\n    parser: 'babel',\n    plugins: [babylonParser],\n    semi: false,\n    singleQuote: true,\n  })\n}\n\nexport const stringifyRGBA = obj => `rgba(${obj.r},${obj.g},${obj.b},${obj.a})`\n\nexport const generateId = () => Math.random().toString(36).slice(2)\n\nexport function dataURLtoBlob(dataurl) {\n  const [first, second] = dataurl.split(',')\n  const mime = first.match(/:(.*?);/)[1]\n  const bstr = atob(second)\n  let n = bstr.length\n  const u8arr = new Uint8Array(n)\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n)\n  }\n  return new Blob([u8arr], { type: mime })\n}\n"]},"metadata":{},"sourceType":"module"}