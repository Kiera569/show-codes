{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/limengyu/Desktop/private/code/project/show-codes/components/FontSelect.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ListSetting from './ListSetting';\nimport { FONTS } from '../lib/constants';\nimport { fileToDataURL as blobToUrl } from '../lib/util';\nconst EXTENSIONS = ['.otf', '.ttf', '.woff'];\n\nconst Font = ({\n  id,\n  name\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  style: id === 'upload' ? {\n    textAlign: 'center',\n    width: '100%'\n  } : {\n    fontFamily: id\n  },\n  children: name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n\nfunction FontSelect(props) {\n  const inputEl = React.useRef(null);\n\n  function onChange(id) {\n    if (id === 'upload') {\n      inputEl.current.click();\n    } else {\n      props.onChange(id);\n    }\n  }\n\n  async function onFiles(e) {\n    const {\n      files\n    } = e.target;\n    const name = files[0].name.split('.')[0];\n    const url = await blobToUrl(files[0]);\n    props.onUpload(name, url);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ListSetting, _objectSpread(_objectSpread({\n      title: \"Font\",\n      items: [{\n        id: 'upload',\n        name: 'Upload +'\n      }, ...FONTS]\n    }, props), {}, {\n      onChange: onChange,\n      children: Font\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      hidden: true,\n      ref: inputEl,\n      type: \"file\",\n      multiple: true,\n      accept: EXTENSIONS.join(','),\n      onChange: onFiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\nexport default FontSelect;","map":{"version":3,"sources":["/Users/limengyu/Desktop/private/code/project/show-codes/components/FontSelect.js"],"names":["React","ListSetting","FONTS","fileToDataURL","blobToUrl","EXTENSIONS","Font","id","name","textAlign","width","fontFamily","FontSelect","props","inputEl","useRef","onChange","current","click","onFiles","e","files","target","split","url","onUpload","join"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,aAAa,IAAIC,SAA1B,QAA2C,aAA3C;AAEA,MAAMC,UAAU,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,kBACX;AAAM,EAAA,KAAK,EAAED,EAAE,KAAK,QAAP,GAAkB;AAAEE,IAAAA,SAAS,EAAE,QAAb;AAAuBC,IAAAA,KAAK,EAAE;AAA9B,GAAlB,GAA2D;AAAEC,IAAAA,UAAU,EAAEJ;AAAd,GAAxE;AAAA,YACGC;AADH;AAAA;AAAA;AAAA;AAAA,QADF;;AAMA,SAASI,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAMC,OAAO,GAAGd,KAAK,CAACe,MAAN,CAAa,IAAb,CAAhB;;AAEA,WAASC,QAAT,CAAkBT,EAAlB,EAAsB;AACpB,QAAIA,EAAE,KAAK,QAAX,EAAqB;AACnBO,MAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB;AACD,KAFD,MAEO;AACLL,MAAAA,KAAK,CAACG,QAAN,CAAeT,EAAf;AACD;AACF;;AAED,iBAAeY,OAAf,CAAuBC,CAAvB,EAA0B;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AAEA,UAAMd,IAAI,GAAGa,KAAK,CAAC,CAAD,CAAL,CAASb,IAAT,CAAce,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAb;AACA,UAAMC,GAAG,GAAG,MAAMpB,SAAS,CAACiB,KAAK,CAAC,CAAD,CAAN,CAA3B;AAEAR,IAAAA,KAAK,CAACY,QAAN,CAAejB,IAAf,EAAqBgB,GAArB;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,KAAK,EAAE,CAAC;AAAEjB,QAAAA,EAAE,EAAE,QAAN;AAAgBC,QAAAA,IAAI,EAAE;AAAtB,OAAD,EAAqC,GAAGN,KAAxC;AAFT,OAGMW,KAHN;AAIE,MAAA,QAAQ,EAAEG,QAJZ;AAAA,gBAMGV;AANH;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AACE,MAAA,MAAM,MADR;AAEE,MAAA,GAAG,EAAEQ,OAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,MAAM,EAAET,UAAU,CAACqB,IAAX,CAAgB,GAAhB,CALV;AAME,MAAA,QAAQ,EAAEP;AANZ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;AAED,eAAeP,UAAf","sourcesContent":["import React from 'react'\nimport ListSetting from './ListSetting'\nimport { FONTS } from '../lib/constants'\nimport { fileToDataURL as blobToUrl } from '../lib/util'\n\nconst EXTENSIONS = ['.otf', '.ttf', '.woff']\n\nconst Font = ({ id, name }) => (\n  <span style={id === 'upload' ? { textAlign: 'center', width: '100%' } : { fontFamily: id }}>\n    {name}\n  </span>\n)\n\nfunction FontSelect(props) {\n  const inputEl = React.useRef(null)\n\n  function onChange(id) {\n    if (id === 'upload') {\n      inputEl.current.click()\n    } else {\n      props.onChange(id)\n    }\n  }\n\n  async function onFiles(e) {\n    const { files } = e.target\n\n    const name = files[0].name.split('.')[0]\n    const url = await blobToUrl(files[0])\n\n    props.onUpload(name, url)\n  }\n\n  return (\n    <div>\n      <ListSetting\n        title=\"Font\"\n        items={[{ id: 'upload', name: 'Upload +' }, ...FONTS]}\n        {...props}\n        onChange={onChange}\n      >\n        {Font}\n      </ListSetting>\n      <input\n        hidden\n        ref={inputEl}\n        type=\"file\"\n        multiple\n        accept={EXTENSIONS.join(',')}\n        onChange={onFiles}\n      />\n    </div>\n  )\n}\n\nexport default FontSelect\n"]},"metadata":{},"sourceType":"module"}