{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/limengyu/Desktop/private/code/project/show-codes/components/AuthContext.js\";\nimport React from 'react';\nimport firebase from '../lib/client'; // IDEA: just read from firebase store at request time?\n\nimport { client } from '../lib/api';\nexport const Context = /*#__PURE__*/React.createContext(null);\nexport function useAuth() {\n  return React.useContext(Context);\n}\n\nfunction AuthContext(props) {\n  const [user, setState] = React.useState(null);\n  React.useEffect(() => {\n    if (firebase) {\n      firebase.auth().onAuthStateChanged(newUser => setState(newUser));\n    }\n  }, []);\n  React.useEffect(() => {\n    if (user) {\n      user.getIdToken().then(jwt => {\n        client.defaults.headers['Authorization'] = jwt ? `Bearer ${jwt}` : undefined;\n      });\n    } else {\n      delete client.defaults.headers['Authorization'];\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: user,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\n\nexport default AuthContext;","map":{"version":3,"sources":["/Users/limengyu/Desktop/private/code/project/show-codes/components/AuthContext.js"],"names":["React","firebase","client","Context","createContext","useAuth","useContext","AuthContext","props","user","setState","useState","useEffect","auth","onAuthStateChanged","newUser","getIdToken","then","jwt","defaults","headers","undefined","children"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB,C,CACA;;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,OAAO,MAAMC,OAAO,gBAAGH,KAAK,CAACI,aAAN,CAAoB,IAApB,CAAhB;AAEP,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAOL,KAAK,CAACM,UAAN,CAAiBH,OAAjB,CAAP;AACD;;AAED,SAASI,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM,CAACC,IAAD,EAAOC,QAAP,IAAmBV,KAAK,CAACW,QAAN,CAAe,IAAf,CAAzB;AAEAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIX,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACY,IAAT,GAAgBC,kBAAhB,CAAmCC,OAAO,IAAIL,QAAQ,CAACK,OAAD,CAAtD;AACD;AACF,GAJD,EAIG,EAJH;AAMAf,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIH,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACO,UAAL,GAAkBC,IAAlB,CAAuBC,GAAG,IAAI;AAC5BhB,QAAAA,MAAM,CAACiB,QAAP,CAAgBC,OAAhB,CAAwB,eAAxB,IAA2CF,GAAG,GAAI,UAASA,GAAI,EAAjB,GAAqBG,SAAnE;AACD,OAFD;AAGD,KAJD,MAIO;AACL,aAAOnB,MAAM,CAACiB,QAAP,CAAgBC,OAAhB,CAAwB,eAAxB,CAAP;AACD;AACF,GARD,EAQG,CAACX,IAAD,CARH;AAUA,sBAAO,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEA,IAAzB;AAAA,cAAgCD,KAAK,CAACc;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,eAAef,WAAf","sourcesContent":["import React from 'react'\nimport firebase from '../lib/client'\n// IDEA: just read from firebase store at request time?\nimport { client } from '../lib/api'\n\nexport const Context = React.createContext(null)\n\nexport function useAuth() {\n  return React.useContext(Context)\n}\n\nfunction AuthContext(props) {\n  const [user, setState] = React.useState(null)\n\n  React.useEffect(() => {\n    if (firebase) {\n      firebase.auth().onAuthStateChanged(newUser => setState(newUser))\n    }\n  }, [])\n\n  React.useEffect(() => {\n    if (user) {\n      user.getIdToken().then(jwt => {\n        client.defaults.headers['Authorization'] = jwt ? `Bearer ${jwt}` : undefined\n      })\n    } else {\n      delete client.defaults.headers['Authorization']\n    }\n  }, [user])\n\n  return <Context.Provider value={user}>{props.children}</Context.Provider>\n}\n\nexport default AuthContext\n"]},"metadata":{},"sourceType":"module"}