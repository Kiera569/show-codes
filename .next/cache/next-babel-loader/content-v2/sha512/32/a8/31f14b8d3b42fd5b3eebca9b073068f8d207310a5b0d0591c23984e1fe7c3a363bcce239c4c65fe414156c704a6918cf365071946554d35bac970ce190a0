{"ast":null,"code":"import _regeneratorRuntime from \"/Users/limengyu/Desktop/private/code/project/show-codes/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/limengyu/Desktop/private/code/project/show-codes/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/limengyu/Desktop/private/code/project/show-codes/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/limengyu/Desktop/private/code/project/show-codes/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/limengyu/Desktop/private/code/project/show-codes/components/FontSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ListSetting from './ListSetting';\nimport { FONTS } from '../lib/constants';\nimport { fileToDataURL as blobToUrl } from '../lib/util';\nvar EXTENSIONS = ['.otf', '.ttf', '.woff'];\n\nvar Font = function Font(_ref) {\n  var id = _ref.id,\n      name = _ref.name;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: id === 'upload' ? {\n      textAlign: 'center',\n      width: '100%'\n    } : {\n      fontFamily: id\n    },\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = Font;\n\nfunction FontSelect(props) {\n  _s();\n\n  var inputEl = React.useRef(null);\n\n  function onChange(id) {\n    if (id === 'upload') {\n      inputEl.current.click();\n    } else {\n      props.onChange(id);\n    }\n  }\n\n  function onFiles(_x) {\n    return _onFiles.apply(this, arguments);\n  }\n\n  function _onFiles() {\n    _onFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var files, name, url;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              files = e.target.files;\n              name = files[0].name.split('.')[0];\n              _context.next = 4;\n              return blobToUrl(files[0]);\n\n            case 4:\n              url = _context.sent;\n              props.onUpload(name, url);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onFiles.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ListSetting, _objectSpread(_objectSpread({\n      title: \"Font\",\n      items: [{\n        id: 'upload',\n        name: 'Upload +'\n      }].concat(_toConsumableArray(FONTS))\n    }, props), {}, {\n      onChange: onChange,\n      children: Font\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      hidden: true,\n      ref: inputEl,\n      type: \"file\",\n      multiple: true,\n      accept: EXTENSIONS.join(','),\n      onChange: onFiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FontSelect, \"ym51OZLSyFi7C9y0aD9taJOK1dY=\");\n\n_c2 = FontSelect;\nexport default FontSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Font\");\n$RefreshReg$(_c2, \"FontSelect\");","map":{"version":3,"sources":["/Users/limengyu/Desktop/private/code/project/show-codes/components/FontSelect.js"],"names":["React","ListSetting","FONTS","fileToDataURL","blobToUrl","EXTENSIONS","Font","id","name","textAlign","width","fontFamily","FontSelect","props","inputEl","useRef","onChange","current","click","onFiles","e","files","target","split","url","onUpload","join"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,aAAa,IAAIC,SAA1B,QAA2C,aAA3C;AAEA,IAAMC,UAAU,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAGC,EAAH,QAAGA,EAAH;AAAA,MAAOC,IAAP,QAAOA,IAAP;AAAA,sBACX;AAAM,IAAA,KAAK,EAAED,EAAE,KAAK,QAAP,GAAkB;AAAEE,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAAlB,GAA2D;AAAEC,MAAAA,UAAU,EAAEJ;AAAd,KAAxE;AAAA,cACGC;AADH;AAAA;AAAA;AAAA;AAAA,WADW;AAAA,CAAb;;KAAMF,I;;AAMN,SAASM,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,MAAMC,OAAO,GAAGd,KAAK,CAACe,MAAN,CAAa,IAAb,CAAhB;;AAEA,WAASC,QAAT,CAAkBT,EAAlB,EAAsB;AACpB,QAAIA,EAAE,KAAK,QAAX,EAAqB;AACnBO,MAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB;AACD,KAFD,MAEO;AACLL,MAAAA,KAAK,CAACG,QAAN,CAAeT,EAAf;AACD;AACF;;AATwB,WAWVY,OAXU;AAAA;AAAA;;AAAA;AAAA,wEAWzB,iBAAuBC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,cAAAA,KADV,GACoBD,CAAC,CAACE,MADtB,CACUD,KADV;AAGQb,cAAAA,IAHR,GAGea,KAAK,CAAC,CAAD,CAAL,CAASb,IAAT,CAAce,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAHf;AAAA;AAAA,qBAIoBnB,SAAS,CAACiB,KAAK,CAAC,CAAD,CAAN,CAJ7B;;AAAA;AAIQG,cAAAA,GAJR;AAMEX,cAAAA,KAAK,CAACY,QAAN,CAAejB,IAAf,EAAqBgB,GAArB;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXyB;AAAA;AAAA;;AAoBzB,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,KAAK,GAAG;AAAEjB,QAAAA,EAAE,EAAE,QAAN;AAAgBC,QAAAA,IAAI,EAAE;AAAtB,OAAH,4BAA0CN,KAA1C;AAFP,OAGMW,KAHN;AAIE,MAAA,QAAQ,EAAEG,QAJZ;AAAA,gBAMGV;AANH;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AACE,MAAA,MAAM,MADR;AAEE,MAAA,GAAG,EAAEQ,OAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,MAAM,EAAET,UAAU,CAACqB,IAAX,CAAgB,GAAhB,CALV;AAME,MAAA,QAAQ,EAAEP;AANZ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAxCQP,U;;MAAAA,U;AA0CT,eAAeA,UAAf","sourcesContent":["import React from 'react'\nimport ListSetting from './ListSetting'\nimport { FONTS } from '../lib/constants'\nimport { fileToDataURL as blobToUrl } from '../lib/util'\n\nconst EXTENSIONS = ['.otf', '.ttf', '.woff']\n\nconst Font = ({ id, name }) => (\n  <span style={id === 'upload' ? { textAlign: 'center', width: '100%' } : { fontFamily: id }}>\n    {name}\n  </span>\n)\n\nfunction FontSelect(props) {\n  const inputEl = React.useRef(null)\n\n  function onChange(id) {\n    if (id === 'upload') {\n      inputEl.current.click()\n    } else {\n      props.onChange(id)\n    }\n  }\n\n  async function onFiles(e) {\n    const { files } = e.target\n\n    const name = files[0].name.split('.')[0]\n    const url = await blobToUrl(files[0])\n\n    props.onUpload(name, url)\n  }\n\n  return (\n    <div>\n      <ListSetting\n        title=\"Font\"\n        items={[{ id: 'upload', name: 'Upload +' }, ...FONTS]}\n        {...props}\n        onChange={onChange}\n      >\n        {Font}\n      </ListSetting>\n      <input\n        hidden\n        ref={inputEl}\n        type=\"file\"\n        multiple\n        accept={EXTENSIONS.join(',')}\n        onChange={onFiles}\n      />\n    </div>\n  )\n}\n\nexport default FontSelect\n"]},"metadata":{},"sourceType":"module"}